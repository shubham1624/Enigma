using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using cT.powerThings.PowerPlatform.SLAManager.Model;
using cT.powerThings.PowerPlatform.SLAManager.ProxyClasses;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Query;

namespace cT.powerThings.PowerPlatform.SLAManager
{
    public partial class Update_milestone_template : BasePlugin
    {
        private IOrganizationService service;
        private ITracingService tracingService;
        private Guid notificationTemplateId = Guid.Empty;
        private Guid milestoneTemplateId = Guid.Empty;
        private Guid milestoneId = Guid.Empty;
        private Entity entity = new Entity();
        bool flag = false;
        Guid processTypeId = Guid.Empty;

        public Update_milestone_template(string unsecureConfig, string secureConfig) : base(unsecureConfig, secureConfig)
        {
            // Register for any specific events by instantiating a new instance of the 'PluginEvent' class and registering it
            base.RegisteredEvents.Add(new PluginEvent()
            {
                Stage = eStage.PostOperation,
                MessageName = MessageNames.Update,
                EntityName = EntityNames.notification,
                PluginAction = ExecutePluginLogic
            });
        }

        public void ExecutePluginLogic(IServiceProvider serviceProvider)
        {

            using (var localContext = new LocalPluginContext<Entity>(serviceProvider))
            {
                //Guid milestone = Guid.Empty;

                try
                {
                    var targetEntity = localContext.TargetEntity.ToEntity<ctpt_Notification>();
                    targetEntity.ctpt_NotificationSent = true;
                    GetMilestoneNotification(targetEntity, localContext.OrganizationService, localContext.CrmContext);
                }
                catch (Exception ex)
                {
                    throw new InvalidPluginExecutionException(ex.Message);
                }
            }
        }

        public void GetMilestoneNotification(ctpt_Notification targetEntity, IOrganizationService service, OrganizationServiceContext crmContext)
        {
            string ctpt_notificationsent = "false";
            bool? notificationFLAG = false;
            //Guid mileStone = Guid.Empty;
            //string ctpt_notificationsent = "false";

            
            notificationFLAG = targetEntity.ctpt_NotificationSent;
            
            int AutoComplete;
            if (notificationFLAG.HasValue && notificationFLAG.Value)

                if (targetEntity.ctpt_NotificationTemplateId != null)

                {
              
                    milestoneId = targetEntity.ctpt_MilestoneId != null ? targetEntity.ctpt_MilestoneId.Id : Guid.Empty;
                    ctpt_Milestone MilestoneEntity = (ctpt_Milestone)service.Retrieve(ctpt_Milestone.LogicalName, milestoneId, new ColumnSet(ctpt_Milestone.Properties.StateCode));
                    MilestoneEntity.StateCode = eCtpt_milestone_statecode.Completed;
         
                    notificationTemplateId = targetEntity.ctpt_NotificationTemplateId != null ? targetEntity.ctpt_NotificationTemplateId.Id : Guid.Empty;
                    ctpt_NotificationTemplate NotificationTemplateEntity = (ctpt_NotificationTemplate)service.Retrieve(ctpt_NotificationTemplate.LogicalName, notificationTemplateId, new ColumnSet(ctpt_NotificationTemplate.Properties.ctpt_MilestoneTemplateId));
                    milestoneTemplateId = NotificationTemplateEntity.ctpt_MilestoneTemplateId != null ? NotificationTemplateEntity.ctpt_MilestoneTemplateId.Id : Guid.Empty;


                    //Entity MilestoneTemplateEntity = service.Retrieve("ctpt_milestone", milestoneTemplateId, new ColumnSet("ctpt_autocomplete"));
                    //AutoComplete = MilestoneTemplateEntity.GetAttributeValue<OptionSetValue>("ctpt_autocomplete").Value;
                   
                    
                    ctpt_MilestoneTemplate MilestoneTemplateEntity = service.Retrieve(ctpt_MilestoneTemplate.LogicalName, milestoneTemplateId, new ColumnSet(ctpt_MilestoneTemplate.Properties.ctpt_AutoComplete)).ToEntity<ctpt_MilestoneTemplate>();
                    milestoneTemplateId = NotificationTemplateEntity.ctpt_MilestoneTemplateId != null ? NotificationTemplateEntity.ctpt_MilestoneTemplateId.Id : Guid.Empty;
                    MilestoneTemplateEntity.ctpt_AutoComplete = MilestoneTemplateEntity.ctpt_AutoComplete;

                    if (MilestoneTemplateEntity.ctpt_AutoComplete.HasValue && MilestoneTemplateEntity.ctpt_AutoComplete.Value)
                    {
                        //var notifications = (from nt in crmContext.CreateQuery<ctpt_Notification>()
                        //                     where nt.ctpt_NotificationTemplateId != null
                        //                     && notifications == true

                        //                     select notification).ToList();


                        //var notifications = (from nt in crmContext.CreateQuery<ctpt_Notification>()
                        //                     where nt.ctpt_NotificationTemplateId != null
                        //                     join mt in crmContext.CreateQuery<ctpt_Notification>() on nt equals mt.ctpt_NotificationTemplateId

                        //                     join stepTemp in localContext.CrmContext.CreateQuery<ctpt_StepTemplate>() on step.ctpt_StepTemplateId.Id equals stepTemp.ctpt_StepTemplateId
                        //                     where step.RegardingObjectId == actionStep.RegardingObjectId && step.StateCode == eCtpt_step_statecode.Open && stepTemp.ctpt_StepOrder != null
                        //                     orderby stage.ctpt_Stageorder ascending
                        //                     select stage).ToList()

                    
                        //public List<ctpt_Notification> GetBusinessClosure(OrganizationServiceContext organizationServiceContext, IOrganizationService organizationService)
                       //{
                            //{
                            List<Notification> nt = new List<Notification>();
                            var Notifications = (from notification in crmContext.CreateQuery<ctpt_Notification>()
                                                 where nt.ctpt_NotificationTemplateId != null
                                                 join notificationTemplate in crmContext.CreateQuery<ctpt_NotificationTemplate>()
                                                     on notification.ctpt_NotificationTemplateId equals notificationTemplate.ctpt_notificationtemplateId
                                                 where notificationTemplate.ctpt_MilestoneTemplateId != null
                                                    && notificationTemplate.ctpt_MilestoneTemplateId.Id == ctpt_MilestoneTemplate
                                                 select notification).ToList();

                                        foreach (var Notification in Notifications)
                                        {
                                            if (Notification.ctpt_notificationsent.HasValue)
                                            {
                                                nt.Add(new ctpt_Notification)
                                                {
                                                     if (Notification.ctpt_notificationsent == true) { flag = true; }
                                    
                                                else
                                                {
                                                            return;
                                                }

                                            };
                                }
                            }

                                    //return nt;
                                    if (flag == true)
                                    {
                                        Service.Update(MilestoneEntity);
                                    }
                                }

        //string notification = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
        //                                        "  <entity name='ctpt_notification'>" +
        //                                        "    <attribute name='ctpt_notificationid' />" +
        //                                        "    <attribute name='ctpt_name' />" +
        //                                        "    <attribute name='createdon' />" +
        //                                        "    <attribute name='ctpt_notificationsent' />" +
        //                                        "    <attribute name='ctpt_notificationtemplateid' />" +
        //                                        "    <attribute name='ctpt_milestoneid' />" +
        //                                        "    <attribute name='ctpt_duedate' />" +
        //                                        "    <order attribute='ctpt_name' descending='false' />" +
        //                                        "    <link-entity name='ctpt_notificationtemplate' from='ctpt_notificationtemplateid' to='ctpt_notificationtemplateid' link-type='inner' alias='ac'>" +
        //                                        "      <filter type='and'>" +
        //                                        "        <condition attribute='ctpt_milestonetemplateid' operator='eq' uitype='ctpt_milestone' value='" + milestoneTemplateId + "/>" +
        //                                        "      </filter>" +
        //                                        "    </link-entity>" +
        //                                        "  </entity>" +
        //                                        "</fetch>";
        //                EntityCollection NotificationCol = service.RetrieveMultiple(new FetchExpression(notification));
        //                if(NotificationCol.Entities.Count > 0)
        //                {

        //                    foreach(Entity notificationSent in NotificationCol.Entities)
        //                    {
        //                        bool notificationsent = (bool)notificationSent.Attributes["ctpt_notificationsent"];
        //                        if (notificationsent == true) { flag = true; }
        //                        else
        //                        {
        //                            return;
        //                        }
        //                    }
        //                    if (flag == true)
        //                    {
        //                        service.Update(MilestoneEntity);
        //                    }

                        }
                    }                  
                }
        }
    }
}
   